# API Client Generation

## OpenAPI Integration

- Backend automatically generates OpenAPI schema from FastAPI routes
- Frontend uses auto-generated TypeScript client from OpenAPI spec
- Client generation tool: [@hey-api/openapi-ts](mdc:frontend/package.json)

## Client Generation Process

1. **Backend**: FastAPI automatically generates OpenAPI spec at `/openapi.json`
2. **Frontend**: Run `npm run generate-client` to regenerate TypeScript client
3. **Configuration**: [frontend/openapi-ts.config.ts](mdc:frontend/openapi-ts.config.ts)
4. **Output**: Generated files in [frontend/src/client/](mdc:frontend/src/client/)

## Generated Files

- **Types**: [frontend/src/client/types.gen.ts](mdc:frontend/src/client/types.gen.ts)
- **Schemas**: [frontend/src/client/schemas.gen.ts](mdc:frontend/src/client/schemas.gen.ts)
- **SDK**: [frontend/src/client/sdk.gen.ts](mdc:frontend/src/client/sdk.gen.ts)
- **Core**: [frontend/src/client/core/](mdc:frontend/src/client/core/)

## Usage Guidelines

- Always regenerate client after API changes
- Use generated types for request/response data
- Import from generated client: `import { api } from '@/client'`
- Use React Query with generated client methods
- Handle errors using generated error types

## API Documentation

- Interactive docs available at `/docs` (Swagger UI)
- Alternative docs at `/redoc` (ReDoc)
- API spec available at `/openapi.json`
- Use these for API exploration and testing

## Best Practices

- Keep API changes backward compatible when possible
- Use proper HTTP status codes
- Implement proper error responses
- Document API endpoints with docstrings
- Use Pydantic models for request/response validation

## Development Workflow

1. Make API changes in backend
2. Test API endpoints manually
3. Regenerate frontend client: `npm run generate-client`
4. Update frontend code to use new client
5. Test integration end-to-end
description:
globs:
alwaysApply: false
---
