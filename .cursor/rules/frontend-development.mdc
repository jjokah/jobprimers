# Frontend Development Guidelines

## React & TypeScript Best Practices

- Use functional components with hooks
- Implement proper TypeScript types for all props and state
- Use TanStack Router for routing (see [frontend/src/routes/](mdc:frontend/src/routes/))
- Follow the component structure in [frontend/src/components/](mdc:frontend/src/components/)

## Component Organization

- UI components in [frontend/src/components/ui/](mdc:frontend/src/components/ui/)
- Feature components organized by domain (Admin, UserSettings, etc.)
- Use Chakra UI for styling and theming
- Implement dark mode support with next-themes

## State Management

- Use React Query (TanStack Query) for server state
- Use React Hook Form for form management
- Implement proper error boundaries with react-error-boundary
- Use React context for global state when needed

## API Integration

- Use the auto-generated API client in [frontend/src/client/](mdc:frontend/src/client/)
- Regenerate client after API changes: `npm run generate-client`
- Implement proper loading and error states
- Use React Query for caching and synchronization

## Styling

- Use Chakra UI components and theme system
- Implement responsive design
- Support both light and dark modes
- Use consistent spacing and typography

## Testing

- Write Playwright tests in [frontend/tests/](mdc:frontend/tests/)
- Test user interactions and workflows
- Use proper test data and fixtures
- Run tests with: `npm run test`

## Code Quality

- Use Biome for linting and formatting (configured in [frontend/biome.json](mdc:frontend/biome.json))
- Follow TypeScript strict mode
- Use proper import/export patterns
- Implement proper error handling

## Dependencies

- Add new dependencies to [frontend/package.json](mdc:frontend/package.json)
- Use npm for package management
- Keep dependencies up to date
- Use specific versions for stability
description:
globs:
alwaysApply: false
---
