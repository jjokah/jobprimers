# Code Quality Guidelines

## Backend Code Quality

- **Linting**: Ruff for Python linting and formatting
- **Type Checking**: MyPy with strict mode enabled
- **Configuration**: [backend/pyproject.toml](mdc:backend/pyproject.toml)
- **Pre-commit**: Automated checks before commits

## Frontend Code Quality

- **Linting**: Biome for TypeScript/JavaScript linting and formatting
- **Type Checking**: TypeScript strict mode
- **Configuration**: [frontend/biome.json](mdc:frontend/biome.json)
- **Build**: Vite for development and production builds

## Pre-commit Hooks

- Automatically run on every commit
- Check for large files, TOML, YAML syntax
- Run Ruff for Python code
- Run ESLint and Prettier for frontend code
- Install hooks: `uv run pre-commit install`

## Code Formatting

- **Backend**: Ruff formatter with consistent style
- **Frontend**: Biome formatter with TypeScript support
- **Configuration**: Follow project-specific settings
- **Auto-format**: Run formatters before committing

## Linting Rules

- **Backend**: PEP 8, flake8-bugbear, pyupgrade
- **Frontend**: ESLint with TypeScript rules
- **Ignore**: Specific rules can be ignored with comments
- **Configuration**: Project-specific rules in config files

## Development Scripts

- **Format**: `./scripts/format.sh`
- **Lint**: `./scripts/lint.sh`
- **Test**: `./scripts/test.sh`
- **Build**: `./scripts/build.sh`

## Best Practices

- Use consistent naming conventions
- Write clear, readable code
- Add proper comments and documentation
- Follow project structure conventions
- Use type hints (Python) and TypeScript types
- Implement proper error handling

## IDE Configuration

- Use consistent editor settings
- Enable format-on-save
- Configure linting integration
- Use project-specific extensions
description:
globs:
alwaysApply: false
---
