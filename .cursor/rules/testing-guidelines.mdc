# Testing Guidelines

## Backend Testing (Pytest)

- Test files in [backend/app/tests/](mdc:backend/app/tests/)
- API tests in [backend/app/tests/api/](mdc:backend/app/tests/api/)
- CRUD tests in [backend/app/tests/crud/](mdc:backend/app/tests/crud/)
- Use pytest fixtures for database setup and teardown
- Test both success and error scenarios
- Use proper test data and factories

## Frontend Testing (Playwright)

- Test files in [frontend/tests/](mdc:frontend/tests/)
- E2E tests for user workflows
- Component testing for UI interactions
- Use proper test data and authentication setup
- Test both light and dark modes
- Test responsive design

## Test Configuration

- Backend test config: [backend/app/tests/conftest.py](mdc:backend/app/tests/conftest.py)
- Frontend test config: [frontend/playwright.config.ts](mdc:frontend/playwright.config.ts)
- Test utilities in [frontend/tests/utils/](mdc:frontend/tests/utils/)

## Running Tests

- Backend: `cd backend && uv run pytest`
- Frontend: `cd frontend && npm run test`
- Full test suite: `./scripts/test.sh`
- Local testing: `./scripts/test-local.sh`

## Test Best Practices

- Write descriptive test names
- Use proper assertions and error messages
- Test edge cases and error conditions
- Keep tests independent and isolated
- Use proper test data cleanup
- Aim for good test coverage

## Test Data Management

- Use factories for creating test data
- Clean up test data after each test
- Use database transactions for test isolation
- Mock external services when appropriate

## Continuous Integration

- Tests run automatically on GitHub Actions
- Coverage reporting enabled
- Pre-commit hooks run tests before commits
- All tests must pass before deployment
description:
globs:
alwaysApply: false
---
